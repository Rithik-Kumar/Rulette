{
  "name": "Rulette",
  "tagline": "Lightweight business rule system implemented in Java",
  "body": "[![Build Status](https://travis-ci.org/kislayverma/Rulette.svg?branch=master)](https://travis-ci.org/kislayverma/Rulette)\r\n[javadoc rulette-core 1.x](http://kislayverma.github.io/Rulette/1.x/rulette-core)\r\n[javadoc rulette-rest 1.x](http://kislayverma.github.io/Rulette/1.x/rulette-rest)\r\n\r\nRulette is a lightweight, domain-agnostic rule modelling, storage, and evaluation engine.\r\n\r\n 1. JARGON : Rulette is a mapping of elements of a multi-dimensional input space to elements of a well-defined output space.\r\n 2. JARGON : Each dimension of the input space is called a rule-input. An input can be of type 'value' (discrete valued variable) or a range (intervals).\r\n 3. JARGON : The output of rule engine is an identifier which has meaning in the business domain.\r\n 4. An example of rule : If X= 2 AND Y = 3, THEN Z =42 (X and Y are rule-inputs of type value).\r\n 5. An example of rule : If X= 2 AND 20120101 < Y < 20131231, THEN Z =42 (Y is a rule-inputs of type range).\r\n 6. Rules are modelled as rows of a database table which has one column per rule-input\r\n 7. Values of all columns are AND-ed together for evaluating the rule.\r\n 8. A null value of any rule-input means that rule-input has no part to play in the evaluation of that rule. e.g. in the rule : IF X = 2 and Y = null, Z = 42, the output will be 42 for all values of Y so long as X is 2.\r\n 6. Rule inputs can be of type number(float), date, or strings.\r\n 7. Input have a priority order. This is the order in which they are evaluated to arrive at the\r\n    output. Defining priorities is much like defining database indexes - different choices can \r\n    cause widely divergent performance. Worse-depending on your domain, incorrect priorities may \r\n    even lead to incorrect results.\r\n 8. The table which holds the rules must have two columns : 'rule_id' (unique id for the rule, preferable an auto-incrementing primary key) and 'rule_output_id' (unique identifier for the output).\r\n 9. To do rule evaluation, the system takes the combination of the different rule inputs given \r\n    to it, and returns the best fitting rule (if any). 'Best fit' means:\r\n    a. Value inputs - An exact value match is better than an 'any' match. e.g. if there are two \r\n       rules, one with value of input X as 1 and the other as any, then on passing X = 1, the \r\n       former rule will be returned. On passing X = 2, the latter will be returned (as the \r\n       former obviously doesn't match).\r\n    b. Range inputs : A tighter range is a better fit than a wider range. e.g. if there are two \r\n       rules, one with value of input X as Jan 1 2013 to Dec31, 2013 and the other as Feb 1 2013 \r\n       to March 1 2013, then on passing X = Feb 15, 2013, the latter will be returned.\r\n 10. Conflicting rules are those that will, if present in the system, cause ambiguity at the time \r\n     of rule evaluation. The addRule APIs do not allow addition of conflicting rules.\r\n\r\nThe following APIs are exposed for interacting with the rule system:\r\n```\r\nList<Rule> getAllRules()\r\nRule getRule(Integer rule_id)\r\nRule getRule(Map<String, String>)\r\nRule addRule(Rule)\r\nRule addRule(Map<String, String>)\r\nRule deleteRule(Rule)\r\nRule deleteRule(Integer rule_id)\r\nList<Rule> getConflictingRules(Rule)\r\nRule getNextApplicableRule(Map<String, String>)\r\n```\r\n-------------------------\r\n#  Pre-requisites\r\n 1. Java 1.7\r\n 2. MySQL 5.x\r\n-------------------------- \r\n# Setup\r\n 1. Execute the setup.sql script on your MySQL server. This creates a database called rule_system\r\n    and creates the necessary table in it.\r\n 2. Create a table containing your rules as defined in #8 above (if you don't have it already).\r\n 3. Map this table in the rule_system.rule_system table as shown in the sample-setup.sql script.\r\n 4. For each rule input, add a row to the rule_system.rule_input table with the input's type \r\n    (Value/Range) and priority order.\r\n 5. Put the jar in your class path.\r\n \r\n That's  it! Rulette is all set up and ready to use.\r\n------------------------------------------------------\r\n#  Sample usage #\r\n\r\n```\r\n RuleSystem rs = new RuleSystem(<rule system name>[, <validator>]);\r\n Rule r = rs.getRule(<ruleid>);\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}